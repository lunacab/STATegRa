# run the SES algorithm
sesObject <- SES(target , dataset, max_k = 5, threshold = 0.05, test = "testIndFisher",
hash = TRUE, hashObject = NULL);
# print summary of the SES output
summary(sesObject);
SES
MXM:::InternalSES
sesObject@pvalues
summary(sesObject@pvalues)
library(devtools)
session_info()
1 - pchisq(q = 14.21, df = 10, log.p = TRUE)
pchisq(q = 14.21, df = 10, log.p = TRUE)
pchisq(q = 14.21, df = 11, log.p = TRUE)
pchisq(q = 14.21, df = 100, log.p = TRUE)
pchisq(q = 14.21, df = 30, log.p = TRUE)
pchisq(q = 14.21, df = 40, log.p = TRUE)
pchisq(q = 14.21, df = 45, log.p = TRUE)
pchisq(q = 14.21, df = 42, log.p = TRUE)
pchisq(q = 14.21, df = 43, log.p = TRUE)
exp(-11.025530)
exp(-exp(-0.929+0.708*ln(16)))
exp(-exp(-0.929+0.708*log(16)))
ss = c(5, 10, 50, 100, 500, 1000, 5000, 10000, 50000, 100000, 500000, 1000000)
ss <- c(5, 10, 50, 100, 500, 1000, 5000, 10000, 50000, 100000, 500000, 1000000)
nSs <- length(ss)
aveDiff <- 0.001
pvalues <- c()
for(i in 1:nSs){
sample1 <-rnorm(ss[i])
sample2 <-rnorm(ss[i]) + aveDiff
pvalues[i] <- t.test(sample1, sample2)$p.value
}
pvalues
ss <- c(5, 10, 50, 100, 500, 1000, 5000, 10000, 50000, 100000, 500000, 1000000)
nSs <- length(ss)
aveDiff <- 0.01
pvalues <- c()
for(i in 1:nSs){
sample1 <-rnorm(ss[i])
sample2 <-rnorm(ss[i]) + aveDiff
pvalues[i] <- t.test(sample1, sample2)$p.value
}
pvalues
ss <- c(5, 10, 50, 100, 500, 1000, 5000, 10000, 50000, 100000, 500000, 1000000)
nSs <- length(ss)
aveDiff <- 0.001
pvalues <- c()
for(i in 1:nSs){
sample1 <-rnorm(ss[i])
sample2 <-rnorm(ss[i]) + aveDiff
pvalues[i] <- t.test(sample1, sample2)$p.value
}
pvalues
ss <- c(5, 10, 50, 100, 500, 1000, 5000, 10000, 50000, 100000, 500000, 1000000)
nSs <- length(ss)
aveDiff <- 0.01
pvalues <- c()
for(i in 1:nSs){
sample1 <-rnorm(ss[i])
sample2 <-rnorm(ss[i]) + aveDiff
pvalues[i] <- t.test(sample1, sample2)$p.value
}
pvalues
mean(sample1)
sd(sample1)
toPlot <- data.frame(sampleSize = ss, pvalue = pvalues)
p <- ggplot(data = toPlot, mapping = aes(x = samplSize, y = pvalue)) +
geom_point()
library(ggplot2)
toPlot <- data.frame(sampleSize = log10(ss), pvalue = -log10(pvalues))
p <- ggplot(data = toPlot, mapping = aes(x = samplSize, y = pvalue)) +
geom_point()
plot(p)
p <- ggplot(data = toPlot, mapping = aes(x = sampleSize, y = pvalue)) +
geom_point()
plot(p)
ss <- c(5, 10, 50, 100, 500, 1000,
5000, 10000, 50000, 100000,
500000, 1000000,
5000000, 10000000)
nSs <- length(ss)
aveDiff <- 0.01
pvalues <- c()
for(i in 1:nSs){
sample1 <-rnorm(ss[i])
sample2 <-rnorm(ss[i]) + aveDiff
pvalues[i] <- t.test(sample1, sample2)$p.value
}
pvalues
library(ggplot2)
toPlot <- data.frame(sampleSize = log10(ss), pvalue = -log10(pvalues))
p <- ggplot(data = toPlot, mapping = aes(x = sampleSize, y = pvalue)) +
geom_point()
plot(p)
p <- ggplot(data = toPlot, mapping = aes(x = sampleSize, y = pvalue)) +
geom_point() +
xlab('log10 sample size') +
ylab('-log10 pvalue') +
theme_bw()
plot(p)
p <- ggplot(data = toPlot, mapping = aes(x = sampleSize, y = pvalue)) +
geom_point() +
xlab('log10 sample size') +
ylab('-log10 pvalue') +
theme_bw() +
scale_y_continuous(breaks = 1:7,
labels = c('10', '10^2',
'10^3', '10^4',
'10^5', '10^6', '10^7'))
plot(p)
library(ggplot2)
toPlot <- data.frame(sampleSize = log10(ss), pvalue = -log10(pvalues))
p <- ggplot(data = toPlot, mapping = aes(x = sampleSize, y = pvalue)) +
geom_point() +
xlab('log10 sample size') +
ylab('-log10 pvalue') +
theme_bw() +
scale_x_continuous(breaks = 1:7,
labels = c('10', '10^2',
'10^3', '10^4',
'10^5', '10^6', '10^7'))
plot(p)
ss <- c(5, 10, 50, 100, 500, 1000,
5000, 10000, 50000, 100000,
500000, 1000000)
nSs <- length(ss)
aveDiff <- 0.05
pvalues <- c()
for(i in 1:nSs){
sample1 <-rnorm(ss[i])
sample2 <-rnorm(ss[i]) + aveDiff
pvalues[i] <- t.test(sample1, sample2)$p.value
}
pvalues
library(ggplot2)
toPlot <- data.frame(sampleSize = log10(ss), pvalue = -log10(pvalues))
p <- ggplot(data = toPlot, mapping = aes(x = sampleSize, y = pvalue)) +
geom_point() +
xlab('log10 sample size') +
ylab('-log10 pvalue') +
theme_bw() +
scale_x_continuous(breaks = 1:7,
labels = c('10', '10^2',
'10^3', '10^4',
'10^5', '10^6', '10^7'))
plot(p)
ss <- c(5, 10, 50, 100, 500, 1000,
5000, 10000, 50000, 100000,
500000, 1000000)
nSs <- length(ss)
aveDiff <- 0.01
pvalues <- c()
for(i in 1:nSs){
sample1 <-rnorm(ss[i])
sample2 <-rnorm(ss[i]) + aveDiff
pvalues[i] <- t.test(sample1, sample2)$p.value
}
pvalues
library(ggplot2)
toPlot <- data.frame(sampleSize = log10(ss), pvalue = -log10(pvalues))
p <- ggplot(data = toPlot, mapping = aes(x = sampleSize, y = pvalue)) +
geom_point() +
xlab('log10 sample size') +
ylab('-log10 pvalue') +
theme_bw() +
scale_x_continuous(breaks = 1:6,
labels = c('10', '10^2',
'10^3', '10^4',
'10^5', '10^6'))
plot(p)
png(filename = 'pvalues.png', width = 1500, height = 1200, res = 300)
plot(p)
dev.off()
# Number of Genes
numGenes <- 5000
# Number of Permutations
numPerm <- 1001
# NULL statistics generation
statisticsNULL <- matrix(data = rnorm(n = numGenes * numPerm, mean = 10, sd = 2),
nrow = numGenes, ncol = numPerm)
require(parallel)
FDR_calculation <- function(statistics){
# statistics: matrix
# columns: statistics, first column initial statistics,
#          other columns statistics created during permutations
# rows: genes
statistics <- abs(statistics)
num_perm <- ncol(statistics) - 1
init_stats <- statistics[,1]
perm_stats <- statistics[,2: (num_perm + 1)]
q <- median(perm_stats)
pi0 <- (2*sum(init_stats <= q))/ length(init_stats)
fdr <- function(threshold){
V <- sum(perm_stats > threshold)/num_perm
R <- sum(init_stats > threshold)
FDR <- pi0*V/R
return(FDR)
}
FDR <- sapply(X = init_stats, FUN = fdr)
return(FDR)
}
FDR_calculation.parallel <- function(statistics, ncores){
# statistics: matrix
# columns: statistics, first column initial statistics,
#          other columns statistics created during permutations
# rows: genes
statistics <- abs(statistics)
num_perm <- ncol(statistics) - 1
init_stats <- statistics[,1]
perm_stats <- statistics[,2: (num_perm + 1)]
q <- median(perm_stats)
pi0 <- (2*sum(init_stats <= q))/ length(init_stats)
fdr <- function(threshold, init_stats, perm_stats, num_perm){
V <- sum(perm_stats > threshold)/num_perm
R <- sum(init_stats > threshold)
FDR <- pi0*V/R
return(FDR)
}
FDR <- mclapply(X = init_stats, FUN = fdr, init_stats = init_stats,
perm_stats = perm_stats, num_perm = num_perm,
mc.cores = ncores)
return(unlist(FDR))
}
numGenes <- 5000
numPerm <- 1001
statisticsNULL <- matrix(data = rnorm(n = numGenes * numPerm, mean = 10, sd = 2),
nrow = numGenes, ncol = numPerm)
system.time(test <- FDR_calculation(statistics = statisticsNULL))
summary(test.parallel)
system.time(test.parallel <- FDR_calculation.parallel(statistics = statisticsNULL))
summary(test)
library(bnlearn)
e
e <- empty.graph()
e <- empty.graph(1)
e <- empty.graph('1')
e
dag
dag <- matrix(rnorm(25) >1, 5, 5)
amat(e) <- dag
e <- empty.graph(letters[1:5])
amat(e) <- dag
dag <- matrix(rnorm(25) >1, 5, 5)
amat(e) <- dag
e
b <- rbn(e)
?rbn
2^12
getwd()
(98*27)/(1036*51)
getwd()
class(matrix(0))
class(data.frame())
class(survival::Surv())
class(survival::Surv(time = c(1,2)))
a <- data.frame(uno = c(1,2,3), due = letters[1:3])
a
rownames(a) <- c('z', 'y', 'x')
a
b <- as.matrix(a)
b
is.vector(c('a', 'b'))
is.vector(c(1:2))
is.vector(1)
is.vector('a')
a <- 1:10
names(a)
library(limma)
?topTable
dataMatrix <- matrix(rnorm(1000), 100, 10)
outcome <- c(rep(1,5), rep(0, 5))
design <- model.matrix(~outcome)
library(limma)
dataMatrix <- matrix(rnorm(1000), 100, 10)
outcome <- c(rep(1,5), rep(0, 5))
design <- model.matrix(~outcome)
fit <- lmFit(object = dataMatrix, design = design)
fit <- eBayes(fit)
head(topTable(fit))
library(limma)
dataMatrix <- matrix(rnorm(1000), 100, 10)
outcome <- c(rep(1,5), rep(0, 5))
design <- model.matrix(~outcome)
fit <- lmFit(object = dataMatrix, design = design)
fit <- eBayes(fit)
head(topTable(fit))
library(limma)
dataMatrix <- matrix(rnorm(1000), 100, 10)
outcome <- rnorm(10);#c(rep(1,5), rep(0, 5))
design <- model.matrix(~outcome)
fit <- lmFit(object = dataMatrix, design = design)
fit <- eBayes(fit)
head(topTable(fit))
mean(dataMatrix[1, ])
mean(dataMatrix[7, ])
library(limma)
dataMatrix <- matrix(rnorm(1000), 100, 10)
outcome <- c(rep(1,5), rep(0, 5))
design <- model.matrix(~outcome)
fit <- lmFit(object = dataMatrix, design = design)
fit <- eBayes(fit)
names(topTable(fit))
names(topTable(fit, coef = 2))
topTable(fit, coef = 2)
0.7043961 -4.513249
log(0.7043961 )
0.7043961 -4.513249
log(1-0.7043961 )
getwd()
setwd('D:\\Dropbox (Personal)\\inprogress\\TwoPagesBionformatics\\STATegRa\\R')
outcome <- Surv(time = runif(10), event = c(rep(1,5), rep(0, 5)))
library(survival)
outcome <- Surv(time = runif(10), event = c(rep(1,5), rep(0, 5)))
survModel <- summary(coxph(outcome ~ ., data = dataMatrix))$coefficients
coxph(outcome ~ ., data = dataMatrix)
survModel <- summary(coxph(outcome ~ ., data = as.data.frame(dataMatrix)))$coefficients
summary(coxph(outcome ~ ., data = as.data.frame(dataMatrix)))
coxph(outcome ~ ., data = as.data.frame(dataMatrix))
as.data.frame(dataMatrix)
library(limma)
dataMatrix <- data.frame(matrix(rnorm(1000), 100, 10))
outcome <- c(rep(1,5), rep(0, 5))
design <- model.matrix(~outcome)
fit <- lmFit(object = dataMatrix, design = design)
fit <- eBayes(fit)
names(topTable(fit, coef = 2))
library(survival)
outcome <- Surv(time = runif(10), event = c(rep(1,5), rep(0, 5)))
survModel <- summary(coxph(outcome ~ ., data = dataMatrix))$coefficients
outcome
survModel <- summary(coxph(outcome ~ ., data = dataMatrix[1, ]))$coefficients
dataMatrix[1, ]
outcome <- Surv(time = runif(10), event = c(rep(1,5), rep(0, 5)))
dataMatrix <- matrix(rnorm(10), 10, 1)
survModel <- summary(coxph(outcome ~ 'V1', data = dataMatrix))$coefficients
survModel <- summary(coxph(outcome ~ ., data = dataMatrix))$coefficients
dataMatrix
coxph(formula = outcome ~ ., data = dataMatrix)
coxph(formula = outcome ~ dataMatrix)
summary(coxph(formula = outcome ~ dataMatrix))
summary(coxph(formula = outcome ~ dataMatrix))$coefficients
summary(coxph(formula = outcome ~ dataMatrix))$coefficients
design <- list(Surv(time = runif(10), event = c(rep(1,5), rep(0, 5))))
dataMatrix <- matrix(rnorm(1000), 100, 10)
outcomId <- 1
modelFunction <- function(x, design, outcomeId){
#removing the survival outcome
survOutcome <- design[[outcomeId]];
design[[outcomeId]] <- NULL;
#including x in the model
if(outcomeId == 1){
designX <- data.frame(x = x);;
}else{
designX <- cbind(design, x);
}
#wald p-value
if(returnPValues){
summary(coxph(survOutcome ~ ., data = designX))$coefficients['x', 'Pr(>|z|)']
}else{
summary(coxph(survOutcome ~ ., data = designX))$coefficients['x', 'z']
}
}
statistics <- apply(dataMatrix, 1, modelFunction, design, outcomeId);
library(survival)
design <- list(Surv(time = runif(10), event = c(rep(1,5), rep(0, 5))))
dataMatrix <- matrix(rnorm(1000), 100, 10)
outcomeId <- 1
modelFunction <- function(x, design, outcomeId){
#removing the survival outcome
survOutcome <- design[[outcomeId]];
design[[outcomeId]] <- NULL;
#including x in the model
if(outcomeId == 1){
designX <- data.frame(x = x);;
}else{
designX <- cbind(design, x);
}
#wald p-value
if(returnPValues){
summary(coxph(survOutcome ~ ., data = designX))$coefficients['x', 'Pr(>|z|)']
}else{
summary(coxph(survOutcome ~ ., data = designX))$coefficients['x', 'z']
}
}
statistics <- apply(dataMatrix, 1, modelFunction, design, outcomeId);
returnPValues <- TRUE
modelFunction <- function(x, design, outcomeId){
#removing the survival outcome
survOutcome <- design[[outcomeId]];
design[[outcomeId]] <- NULL;
#including x in the model
if(outcomeId == 1){
designX <- data.frame(x = x);;
}else{
designX <- cbind(design, x);
}
#wald p-value
if(returnPValues){
summary(coxph(survOutcome ~ ., data = designX))$coefficients['x', 'Pr(>|z|)']
}else{
summary(coxph(survOutcome ~ ., data = designX))$coefficients['x', 'z']
}
}
statistics <- apply(dataMatrix, 1, modelFunction, design, outcomeId);
statistics
library(survival)
design <- list(Surv(time = runif(10), event = c(rep(1,5), rep(0, 5))))
dataMatrix <- matrix(rnorm(200), 20, 10)
outcomeId <- 1
returnPValues <- TRUE
modelFunction <- function(x, design, outcomeId){
#removing the survival outcome
survOutcome <- design[[outcomeId]];
design[[outcomeId]] <- NULL;
#including x in the model
if(outcomeId == 1){
designX <- data.frame(x = x);;
}else{
designX <- cbind(design, x);
}
#wald p-value
if(returnPValues){
summary(coxph(survOutcome ~ ., data = designX))$coefficients['x', 'Pr(>|z|)']
}else{
summary(coxph(survOutcome ~ ., data = designX))$coefficients['x', 'z']
}
}
statistics <- apply(dataMatrix, 1, modelFunction, design, outcomeId);
statistics
library(limma)
dataMatrix <- matrix(rnorm(1000), 100, 10)
outcome <- c(rep(1,5), rep(0, 5))
design <- model.matrix(~outcome)
fit <- lmFit(object = dataMatrix, design = design)
fit <- eBayes(fit)
names(topTable(fit, coef = 2))
library(survival)
design <- list(Surv(time = runif(10), event = c(rep(1,5), rep(0, 5))))
dataMatrix <- matrix(rnorm(200), 20, 10)
outcomeId <- 1
returnPValues <- TRUE
#model function
modelFunction <- function(x, design, outcomeId){
#removing the survival outcome
survOutcome <- design[[outcomeId]];
design[[outcomeId]] <- NULL;
#including x in the model
if(outcomeId == 1){
designX <- data.frame(x = x);;
}else{
designX <- cbind(design, x);
}
summary(coxph(survOutcome ~ ., data = designX))$coefficients['x', ]
}
#retrieving the statistics
allStatistics <- apply(dataMatrix, 1, modelFunction, design, outcomeId);
allStatistics
allStatistics <-t(apply(dataMatrix, 1, modelFunction, design, outcomeId));
allStatistics
library(limma)
dataMatrix <- matrix(rnorm(1000), 100, 10)
outcome <- c(rep(1,5), rep(0, 5))
design <- model.matrix(~outcome)
fit <- lmFit(object = dataMatrix, design = design)
fit <- eBayes(fit)
names(topTable(fit, coef = 2))
library(survival)
design <- list(Surv(time = runif(10), event = c(rep(1,5), rep(0, 5))))
dataMatrix <- matrix(rnorm(200), 20, 10)
outcomeId <- 1
returnPValues <- TRUE
#model function
modelFunction <- function(x, design, outcomeId){
#removing the survival outcome
survOutcome <- design[[outcomeId]];
design[[outcomeId]] <- NULL;
#including x in the model
if(outcomeId == 1){
designX <- data.frame(x = x);;
}else{
designX <- cbind(design, x);
}
summary(coxph(survOutcome ~ ., data = designX))$coefficients['x', ]
}
#retrieving the statistics
allStatistics <-t(apply(dataMatrix, 1, modelFunction, design, outcomeId));
if(returnPValues){
statistics <- allStatistics[, 'Pr(>|z|)']
}else{
statistics <- allStatistics[, 'z']
}
a <- matrix(NA, 10, 5)
colnames(a) <- letters[1:5]
ciao <- 1:10
cbind(a, ciao)
library(limma)
dataMatrix <- matrix(rnorm(1000), 100, 10)
outcome <- c(rep(1,5), rep(0, 5))
design <- model.matrix(~outcome)
fit <- lmFit(object = dataMatrix, design = design)
fit <- eBayes(fit)
names(topTable(fit, coef = 2))
a <- list(b = data.frame(ciao = rnorm(10)), d = letters[1:10])
a
c(a=a, e=data.frame(piu=runif(10)))
c(a, data.frame(piu=runif(10)))
c(a, data.frame(piu=runif(10), meno = rnorm(10)))
c(a, data.frame(piu=runif(12), meno = rnorm(12)))
c(a, data.frame(piu=runif(12), meno = rnorm(12)), drop = FALSE)
a$pvaluesNPC <- data.frame(meno=runif(20), piu=rnorm(20))
a
