source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/tests/tmp/testingPValueComputation_omicsNPC.R')
source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/tests/tmp/testingParallelAndSerial_omicsNPC.R')
source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/tests/tmp/testingAncillaryFunction_omicsNPC.R')
rm(list = ls());
set.seed(12345)
source('../../R/STATegRa_combiningMappings.R')
rm(list = ls());
set.seed(12345)
source('../../R/STATegRa_combiningMappings.R')
rm(list = ls());
set.seed(12345)
source('../../R/STATegRa_combiningMappings.R')
mapping1 <- data.frame(gene = c('a', 'a', 'a', 'b', 'b', 'c'),
transcript = c('ta1', 'ta2', 'ta3', 'tb1', 'tb2', 'tc1'))
mapping1 <- data.frame(gene = c('a', 'a', 'a', 'b', 'b', 'c'),
transcript = c('ta1', 'ta2', 'ta3', 'tb1', 'tb2', 'tc1'))
mapping2 <- data.frame(gene = c('a', 'a', 'b', 'd'),
protein = c('pa1', 'pa2', 'pb1', 'pd1'))
a <- combiningMappings(mappings = list(mapping1, mapping2))
a
a <- combiningMappings(mappings = list(mapping1, mapping2), retainAll = TRUE)
a
a <- combiningMappings(mappings = list(mapping1, mapping2))
b <- combiningMappings(mappings = list(mapping1, mapping2), retainAll = TRUE)
a <- combiningMappings(mappings = list(dataset_1 = mapping1, dataset2 = mapping2))
b <- combiningMappings(mappings = llist(dataset_1 = mapping1, dataset2 = mapping2),
retainAll = TRUE)
rm(list = ls());
set.seed(12345)
source('../../R/STATegRa_combiningMappings.R')
mapping1 <- data.frame(gene = c('a', 'a', 'a', 'b', 'b', 'c'),
transcript = c('ta1', 'ta2', 'ta3', 'tb1', 'tb2', 'tc1'))
mapping2 <- data.frame(gene = c('a', 'a', 'b', 'd'),
protein = c('pa1', 'pa2', 'pb1', 'pd1'))
a <- combiningMappings(mappings = list(dataset_1 = mapping1, dataset2 = mapping2))
b <- combiningMappings(mappings = list(dataset_1 = mapping1, dataset2 = mapping2),
retainAll = TRUE)
a
source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/tests/tmp/testingDataMapping.R')
a
b
rownames(a) <- NULL
a
b
source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/tests/tmp/testingDataMapping.R')
source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/tests/tmp/testingDataMapping.R')
rm(list = ls());
set.seed(12345)
source('../../R/STATegRa_combiningMappings.R')
mapping1 <- data.frame(gene = c('a', 'a', 'a', 'b', 'b', 'c'),
transcript = c('ta1', 'ta2', 'ta3', 'tb1', 'tb2', 'tc1'))
mapping2 <- data.frame(gene = c('a', 'a', 'b', 'd'),
methylation = c('ma1', 'ma2', 'mb1', 'md1'))
mapping3 <- data.frame(gene = c('a', 'c'),
SNP = c('sa1', 'sc1'))
a <- combiningMappings(mappings = list(expression = mapping1, cpg = mapping2))
b <- combiningMappings(mappings = list(expression = mapping1, cpg = mapping2),
retainAll = TRUE)
print(a)
print(b)
a <- combiningMappings(mappings = list(expression = mapping1,
cpg = mapping2,
genome = mapping3))
b <- combiningMappings(mappings = list(expression = mapping1,
cpg = mapping2,
genome = mapping3),
retainAll = TRUE)
print(a)
print(b)
source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/R/STATegRa_combiningMappings.R')
rm(list = ls());
set.seed(12345)
library(survival)
library(limma)
library(edgeR)
source('../../R/STATegRa_omicsNPC_ancillaryFunctions.R')
dataMatrix <- matrix(rnorm(1000), 100, 10);
design <- data.frame(matrix(rnorm(20), 10, 2))
outcomeName <- 'X1'
a <- computeAssocContinuousData(dataMatrix, design, outcomeName)
class(a)
a
dataMatrixCount <- matrix(rnbinom(n = 1000, size = 1000, prob = 0.2), 100, 10);
a <- computeAssocCountData(dataMatrixCount, design, outcomeName)
a
design <- cbind(design, target = factor(rep(c(1,2), 5)))
outcomeName <- 'target'
a <- computeAssocContinuousData(dataMatrix, design, outcomeName)
a
a <- computeAssocCountData(dataMatrixCount, design, outcomeName)
a
levels(design$target) <- 1:3;
design$target[7:10] <- 3
a <- computeAssocContinuousData(dataMatrix, design, outcomeName)
a
a <- computeAssocCountData(dataMatrixCount, design, outcomeName)
a
design$target <- Surv(time = runif(10), event = rbinom(n = 10, size = 1, prob = 0.65))
a <- computeAssocContinuousData(dataMatrix, design, outcomeName)
a
a <- computeAssocCountData(dataMatrixCount, design, outcomeName)
a
source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/R/STATegRa_omicsNPC_ancillaryFunctions.R')
rm(list = ls())
source('../../R/STATegRa_omicsNPC_internal.R')
source('../../R/STATegRa_omicsPC_internal.R')
source('../../R/STATegRa_omicsNPC_ancillaryFunctions.R')
set.seed(12345)
numMeasurements <- 5;
numDatasets <- 2;
combMethods <- c('Fisher', 'Liptak', 'Tippett');
numPerms <- 10000;
numCores <- 4;
numCombMethods <- length(combMethods)
measurements <- paste('m', 1:numMeasurements, sep = '');
pvaluesPerm <- array(runif(prod(c(numMeasurements, numDatasets, numPerms + 1))),
dim = c(numMeasurements, numDatasets, numPerms + 1))
pvalues0 <- as.matrix(pvaluesPerm[ , , 1])
dataWeights <- rep(1, numDatasets)/numDatasets
statsNPC <- array(dim = c(numMeasurements, numCombMethods, numPerms + 1),
dimnames = list(measurements, combMethods, dimnames(pvaluesPerm)[[3]]))
for(i in 1:numCombMethods){
statsNPC[ , i, ] <-  apply(pvaluesPerm, 3, combiningPvalues,
method = combMethods[i], dataWeights = dataWeights)
}
statsNPC <- statsNPC - min(statsNPC) + 1
pvaluesNPC <- statisticsToPvalues(statsNPC);
pvaluesNPC <- aperm(pvaluesNPC, c(2, 3, 1)) # magic numbers!
pvaluesNPC <- as.matrix(pvaluesNPC[, , 1])
pvaluesPC <- matrix(NA, numMeasurements, numCombMethods)
for(i in 1:numCombMethods){
pvaluesPC[, i] <- combiningPvaluesParametric(pvalues0, combMethods[i])
}
pvaluesNPC
pvaluesPC
rm(list = ls())
source('../../R/STATegRa_omicsNPC_internal.R')
source('../../R/STATegRa_omicsPC_internal.R')
source('../../R/STATegRa_omicsNPC_ancillaryFunctions.R')
set.seed(12345)
numMeasurements <- 5;
numDatasets <- 2;
combMethods <- c('Fisher', 'Liptak', 'Tippett');
numPerms <- 10000;
numCores <- 4;
numCombMethods <- length(combMethods)
measurements <- paste('m', 1:numMeasurements, sep = '');
pvaluesPerm <- array(runif(prod(c(numMeasurements, numDatasets, numPerms + 1))),
dim = c(numMeasurements, numDatasets, numPerms + 1))
pvalues0 <- as.matrix(pvaluesPerm[ , , 1])
dataWeights <- rep(1, numDatasets)/numDatasets
statsNPC <- array(dim = c(numMeasurements, numCombMethods, numPerms + 1),
dimnames = list(measurements, combMethods, dimnames(pvaluesPerm)[[3]]))
for(i in 1:numCombMethods){
statsNPC[ , i, ] <-  apply(pvaluesPerm, 3, combiningPvalues,
method = combMethods[i], dataWeights = dataWeights)
}
statsNPC <- statsNPC - min(statsNPC) + 1
pvaluesNPC <- statisticsToPvalues(statsNPC);
pvaluesNPC <- aperm(pvaluesNPC, c(2, 3, 1)) # magic numbers!
pvaluesNPC <- as.matrix(pvaluesNPC[, , 1])
pvaluesPC <- matrix(NA, numMeasurements, numCombMethods)
for(i in 1:numCombMethods){
pvaluesPC[, i] <- combiningPvaluesParametric(pvalues0, combMethods[i])
}
pvaluesNPC
pvaluesPC
pvalues0
pvaluesNPC
pvaluesPC
x2 <- -2 * (log(pvalues0[, 1]) + log(pvalues0[, 2]))
x2
fisherPvalues <- pchisq(x2, 4, lower.tail = FALSE)
pvalues0
pvaluesNPC
pvaluesPC
fisherPvalues
pvaluesPC
combiningPvaluesParametric
source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/tests/tmp/testingPCandNPC_omicsNPC.R')
pvalues0
pvaluesNPC
pvaluesPC
fisherPvalues
source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/tests/tmp/testingPCandNPC_omicsNPC.R')
pvalues0
pvaluesNPC
pvaluesPC
fisherPvalues
source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/tests/tmp/testingPCandNPC_omicsNPC.R')
pvalues0
pvaluesNPC
pvaluesPC
fisherPvalues
install.packages('npc')
install.packages('NPC')
library(NPC)
NPC
NPC:::t2p
MinimumCF()
MinimumCF
NPC:::MinimumCF()
NPC:::MinimumCF
source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/tests/tmp/testingPCandNPC_omicsNPC.R')
pvalues0
pvaluesNPC
pvaluesPC
fisherPvalues
source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/tests/tmp/testingPCandNPC_omicsNPC.R')
pvalues0
pvaluesNPC
pvaluesPC
fisherPvalues
source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/tests/tmp/testingPCandNPC_omicsNPC.R')
pvalues0
pvaluesNPC
pvaluesPC
fisherPvalues
rm(list = ls())
source('../../R/STATegRa_omicsNPC_internal.R')
source('../../R/STATegRa_omicsPC_internal.R')
source('../../R/STATegRa_omicsNPC_ancillaryFunctions.R')
library(doSNOW)
library(foreach)
numMeasurements <- 5;
a <- rank(runif(10))
a <- rank(runif(5))
a <- rank(runif(5))
a
rank(a)
data.table::frank(a)
rank(a)
data.table::frank(a)
a <- rank(runif(100000))
system.time(b <- rank(a))
system.time(d <- data.table::frank(a))
a <- rank(runif(10000000))
system.time(b <- rank(a))
system.time(d <- data.table::frank(a))
all(b == d)
?data.table::frank
rm(list = ls())
source('../../R/STATegRa_omicsNPC_internal.R')
source('../../R/STATegRa_omicsPC_internal.R')
source('../../R/STATegRa_omicsNPC_ancillaryFunctions.R')
library(doSNOW)
library(foreach)
numMeasurements <- 5;
numDatasets <- 2;
combMethods <- c('Fisher', 'Liptak', 'Tippett');
numPerms <- 10000;
numCores <- 4;
numCombMethods <- length(combMethods)
measurements <- paste('m', 1:numMeasurements, sep = '');
pvaluesPerm <- array(runif(prod(c(numMeasurements, numDatasets, numPerms + 1))),
dim = c(numMeasurements, numDatasets, numPerms + 1))
dataWeights <- rep(1, numDatasets)/numDatasets
#set up
rm(list = ls())
source('../../R/STATegRa_omicsNPC_internal.R')
source('../../R/STATegRa_omicsPC_internal.R')
source('../../R/STATegRa_omicsNPC_ancillaryFunctions.R')
library(doSNOW)
library(foreach)
#control panel
numMeasurements <- 5;
numDatasets <- 2;
combMethods <- c('Fisher', 'Liptak', 'Tippett');
numPerms <- 10000;
numCores <- 4;
#simulating data
numCombMethods <- length(combMethods)
measurements <- paste('m', 1:numMeasurements, sep = '');
pvaluesPerm <- array(runif(prod(c(numMeasurements, numDatasets, numPerms + 1))),
dim = c(numMeasurements, numDatasets, numPerms + 1))
dataWeights <- rep(1, numDatasets)/numDatasets
#initializing
statsNPC <- array(dim = c(numMeasurements, numCombMethods, numPerms + 1),
dimnames = list(measurements, combMethods, dimnames(pvaluesPerm)[[3]]))
statsNPC_par <- statsNPC
#combining the pvalues
etime <- system.time(
for(i in 1:numCombMethods){
statsNPC[ , i, ] <-  apply(pvaluesPerm, 3, combiningPvalues,
method = combMethods[i], dataWeights = dataWeights)
}
)
print(etime)
#combining the pvalues parallel
etime_par <- system.time({
#creating the cluster
cl <- parallel::makeCluster(numCores)
#registering the cluster
doSNOW::registerDoSNOW(cl)
for(i in 1:numCombMethods){
statsNPC_par[ , i, ] <- foreach(j = 1:dim(pvaluesPerm)[3], .combine = 'cbind') %dopar% {
combiningPvalues(as.matrix(pvaluesPerm[ , , j]), method = combMethods[i], dataWeights = dataWeights);
}
}
#closing the cluster
stopCluster(cl)
})
print(etime_par)
#ensuring all stats are positive
statsNPC <- statsNPC - min(statsNPC) + 1
statsNPC_par <- statsNPC_par - min(statsNPC_par) + 1
etime2 <- system.time(pvaluesNPC <- statisticsToPvalues(statsNPC));
print(etime2)
etime2 <- system.time(pvaluesNPC_par <- statisticsToPvalues(statsNPC_par));
print(etime2)
dim(statsNPC)
if (is.null(dim(stats))) {
stats <- array(stats, dim = c(1, length(stats)))
}
stats <- statsNPC
if (is.null(dim(stats))) {
stats <- array(stats, dim = c(1, length(stats)))
}
numDims <- length(dim(stats));
numDims
1:(numDims-1)
pvalues <- apply(stats, 1:(numDims-1), computePvaluesVect)
pvalues
class(pvalues)
length(pvalues)
length(pvaluesNPC)
length(pvaluesNPC_par)
source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/tests/tmp/testingPValueComputation_omicsNPC.R')
source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/tests/tmp/testingPValueComputation_omicsNPC.R')
source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/tests/tmp/testingPValueComputation_omicsNPC.R')
source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/tests/tmp/testingPValueComputation_omicsNPC.R')
source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/tests/tmp/testingPValueComputation_omicsNPC.R')
