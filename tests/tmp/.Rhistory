f <- function(x){1 - 1/x}
f(0)
f(0)
f <- function(x){1/exp(x)}
f(0)
f(Inf)
f(0.2)
f(1)
f(10)
f(100)
f(1000)
f <- function(x){1/exp(x/1000)}
x <- c(0, 1:1000000)
y <- f(x)
plot(x, y, 'l')
x <- c(0, 1:1000)
y <- f(x)
x <- c(0, 1:1000)
plot(x, y, 'l')
x <- c(0, 1:10000)
y <- f(x)
plot(x, y, 'l')
getwd()
library(xcms)
?getEIC
?xcms::group
?diffreport
install.packages('backschift')
install.packages('backShift')
library(backShift)
library(spade)
?SPADE.driver
library(pROC)
library(pROC)
?ci.auc
ci.auc
pROC:::ci.auc.delong
getwd()
source("https://bioconductor.org/biocLite.R")
biocLite("hgug4112a.db")
getwd()
lines
csvlines <- readLines('D://Dropbox (Personal)/inprogress/ColonRectal/2_results_10-04-2017/resistantVsRespondent/allProbesets/allSamples/signatures/dataset_JAD.csv')
substr(csvlines[[1]], 1, 100)
substr(csvlines[[2]], 1, 100)
header <- strsplit(csvlines[[1]], split = ',', fixed = TRUE)
row1 <- as.numeric(strsplit(csvlines[[2]], split = ',', fixed = TRUE)[[1]])
row1[1:100]
header <- strsplit(csvlines[[1]], split = ',', fixed = TRUE)[[1]]
header[1:100]
qnorm(0.1)
z0 <- qnorm(0.1)
alpha <- 0.5
a <- 0.5
pnorm(z0)
pnorm(z0 + (z0 + qnorm(0.025))/(1-a(z0+qnorm(0.025))))
pnorm(z0 + (z0 + qnorm(0.025))/(1-a*(z0+qnorm(0.025))))
pnorm(z0 + (z0 + qnorm(0.025))/(1-5*(z0+qnorm(0.025))))
pnorm(z0 + (z0 + qnorm(0.025))/(1-0.5*(z0+qnorm(0.025))))
pnorm(z0 + (z0 + qnorm(0.025))/(1-1*(z0+qnorm(0.025))))
pnorm(z0 + (z0 + qnorm(0.025))/(1-1.2*(z0+qnorm(0.025))))
library(boot)
abc.ci
library(ggplot2)
data  <- data.frame(Name = c("A","B","C","D","E","F","G","H"), y = c(100,200,300,400,200,300,400,350))
# you have to print before grob-ing
ggplot(data,aes(x=Name,y=y)) + geom_bar()
# locate the lines
g <- # store the plot as a grob
ggplotGrob(p)
grid.ls(g)
data  <- data.frame(Name = c("A","B","C","D","E","F","G","H"), y = c(100,200,300,400,200,300,400,350))
ggplot(data,aes(x=Name,y=y)) + geom_bar()
data  <- data.frame(Name = 1:8, y = c(100,200,300,400,200,300,400,350))
ggplot(data,aes(x=Name,y=y)) + geom_bar()
data  <- data.frame(Name = 1:8, y = c(100,200,300,400,200,300,400,350))
data  <- data.frame(Name = 1:8, y = c(100,200,300,400,200,300,400,350))
ggplot(data,aes(x=Name,y=y)) + geom_point()
g <- # store the plot as a grob
ggplotGrob(p)
library(ggplot2)
p <- # minimal example
qplot(0,0, geom="blank")+ annotate("text",0,0,label="alpha")
p
g <- # store the plot as a grob
ggplotGrob(p)
# structure of the grob
# grid.ls(g) # rather large!
# find a particular grob in the gTree
# grid.ls(grob=F, view=T)
grid.ls(getGrob(g,"texts", grep = T))
grid.edit(gPath("texts.gTree", "GRID.text"), grep=TRUE,
gp=gpar(col="pink"))
grid.edit(gPath("texts.gTree", "GRID.text"), grep=TRUE,
library(ggplot2)
p <- # minimal example
qplot(0,0, geom="blank")+ annotate("text",0,0,label="alpha")
p <- # minimal example
qplot(0,0, geom="blank")+ annotate("text",0,0,label="alpha")
library(ggplot2)
p <- # minimal example
qplot(0,0, geom="blank")+ annotate("text",0,0,label="alpha")
p
g <- # store the plot as a grob
ggplotGrob(p)
grid.ls(getGrob(g,"texts", grep = T))
library(ggplot2)
library(grid)
grid.ls(getGrob(g,"texts", grep = T))
grid.edit(gPath("texts.gTree", "GRID.text"), grep=TRUE,
gp=gpar(col="pink"))
library(ggplot2)
library(gridExtra)
library(grid)
mtcars$cyl <- ordered(mtcars$cyl)
p <- ggplot(mtcars, aes(mpg, hp, colour = cyl)) + geom_point()
p1 <- p + theme(legend.position = "none")
p2 <- ggplot(mtcars, aes(x=mpg, group=cyl, colour=cyl))
p2 <- p2 + stat_density(fill = NA, position="dodge")
p2 <- p2 + theme(legend.position = "none", axis.title.x=element_blank(),
axis.text.x=element_blank())
p3 <- ggplot(mtcars, aes(x=hp, group=cyl, colour=cyl))
p3 <- p3 + stat_density(fill = NA, position="dodge") + coord_flip()
p3 <- p3 + theme(legend.position = "none", axis.title.y=element_blank(),
axis.text.y=element_blank())
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
legend <- g_legend(p)
grid.arrange(arrangeGrob(p2, legend, p1, p3, widths=unit.c(unit(0.75, "npc"), unit(0.25, "npc")), heights=unit.c(unit(0.25, "npc"), unit(0.75, "npc")), nrow=2))
library(ggplot2)
library(grid)
library(gridExtra)
mtcars$cyl <- ordered(mtcars$cyl)
p <- ggplot(mtcars, aes(mpg, hp, colour = cyl)) + geom_point()
p1 <- p + theme(legend.position = "none")
p2 <- ggplot(mtcars, aes(x=mpg, group=cyl, colour=cyl))
p2 <- p2 + stat_density(fill = NA, position="dodge")
p2 <- p2 + theme(legend.position = "none", axis.title.x=element_blank(),
axis.text.x=element_blank())
p3 <- ggplot(mtcars, aes(x=hp, group=cyl, colour=cyl))
p3 <- p3 + stat_density(fill = NA, position="dodge") + coord_flip()
p3 <- p3 + theme(legend.position = "none", axis.title.y=element_blank(),
axis.text.y=element_blank())
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
legend <- g_legend(p)
plot(legend)
grid.arrange(arrangeGrob(p2, legend, p1, p3,
widths=unit.c(unit(0.75, "npc"), unit(0.25, "npc")),
heights=unit.c(unit(0.25, "npc"), unit(0.75, "npc")), nrow=2))
library(MXM)
?SES
set.seed(123)
require("hash", quietly = TRUE)
#simulate a dataset with continuous data
dataset <- matrix(runif(1000 * 200, 1, 100), ncol = 200)
#define a simulated class variable
target <- 3 * dataset[, 10] + 2 * dataset[, 100] + 3 * dataset[, 20] + rnorm(1000, 0, 5)
# define some simulated equivalences
dataset[, 15] <- dataset[, 10] + rnorm(1000, 0, 2)
dataset[, 150] <- dataset[, 100] + rnorm(1000, 0, 2)
dataset[, 130] <- dataset[, 100] + rnorm(1000, 0, 2)
# run the SES algorithm
sesObject <- SES(target , dataset, max_k = 5, threshold = 0.05, test = "testIndFisher",
hash = TRUE, hashObject = NULL);
# print summary of the SES output
summary(sesObject);
SES
MXM:::InternalSES
sesObject@pvalues
summary(sesObject@pvalues)
library(devtools)
session_info()
1 - pchisq(q = 14.21, df = 10, log.p = TRUE)
pchisq(q = 14.21, df = 10, log.p = TRUE)
pchisq(q = 14.21, df = 11, log.p = TRUE)
pchisq(q = 14.21, df = 100, log.p = TRUE)
pchisq(q = 14.21, df = 30, log.p = TRUE)
pchisq(q = 14.21, df = 40, log.p = TRUE)
pchisq(q = 14.21, df = 45, log.p = TRUE)
pchisq(q = 14.21, df = 42, log.p = TRUE)
pchisq(q = 14.21, df = 43, log.p = TRUE)
exp(-11.025530)
exp(-exp(-0.929+0.708*ln(16)))
exp(-exp(-0.929+0.708*log(16)))
ss = c(5, 10, 50, 100, 500, 1000, 5000, 10000, 50000, 100000, 500000, 1000000)
ss <- c(5, 10, 50, 100, 500, 1000, 5000, 10000, 50000, 100000, 500000, 1000000)
nSs <- length(ss)
aveDiff <- 0.001
pvalues <- c()
for(i in 1:nSs){
sample1 <-rnorm(ss[i])
sample2 <-rnorm(ss[i]) + aveDiff
pvalues[i] <- t.test(sample1, sample2)$p.value
}
pvalues
ss <- c(5, 10, 50, 100, 500, 1000, 5000, 10000, 50000, 100000, 500000, 1000000)
nSs <- length(ss)
aveDiff <- 0.01
pvalues <- c()
for(i in 1:nSs){
sample1 <-rnorm(ss[i])
sample2 <-rnorm(ss[i]) + aveDiff
pvalues[i] <- t.test(sample1, sample2)$p.value
}
pvalues
ss <- c(5, 10, 50, 100, 500, 1000, 5000, 10000, 50000, 100000, 500000, 1000000)
nSs <- length(ss)
aveDiff <- 0.001
pvalues <- c()
for(i in 1:nSs){
sample1 <-rnorm(ss[i])
sample2 <-rnorm(ss[i]) + aveDiff
pvalues[i] <- t.test(sample1, sample2)$p.value
}
pvalues
ss <- c(5, 10, 50, 100, 500, 1000, 5000, 10000, 50000, 100000, 500000, 1000000)
nSs <- length(ss)
aveDiff <- 0.01
pvalues <- c()
for(i in 1:nSs){
sample1 <-rnorm(ss[i])
sample2 <-rnorm(ss[i]) + aveDiff
pvalues[i] <- t.test(sample1, sample2)$p.value
}
pvalues
mean(sample1)
sd(sample1)
toPlot <- data.frame(sampleSize = ss, pvalue = pvalues)
p <- ggplot(data = toPlot, mapping = aes(x = samplSize, y = pvalue)) +
geom_point()
library(ggplot2)
toPlot <- data.frame(sampleSize = log10(ss), pvalue = -log10(pvalues))
p <- ggplot(data = toPlot, mapping = aes(x = samplSize, y = pvalue)) +
geom_point()
plot(p)
p <- ggplot(data = toPlot, mapping = aes(x = sampleSize, y = pvalue)) +
geom_point()
plot(p)
ss <- c(5, 10, 50, 100, 500, 1000,
5000, 10000, 50000, 100000,
500000, 1000000,
5000000, 10000000)
nSs <- length(ss)
aveDiff <- 0.01
pvalues <- c()
for(i in 1:nSs){
sample1 <-rnorm(ss[i])
sample2 <-rnorm(ss[i]) + aveDiff
pvalues[i] <- t.test(sample1, sample2)$p.value
}
pvalues
library(ggplot2)
toPlot <- data.frame(sampleSize = log10(ss), pvalue = -log10(pvalues))
p <- ggplot(data = toPlot, mapping = aes(x = sampleSize, y = pvalue)) +
geom_point()
plot(p)
p <- ggplot(data = toPlot, mapping = aes(x = sampleSize, y = pvalue)) +
geom_point() +
xlab('log10 sample size') +
ylab('-log10 pvalue') +
theme_bw()
plot(p)
p <- ggplot(data = toPlot, mapping = aes(x = sampleSize, y = pvalue)) +
geom_point() +
xlab('log10 sample size') +
ylab('-log10 pvalue') +
theme_bw() +
scale_y_continuous(breaks = 1:7,
labels = c('10', '10^2',
'10^3', '10^4',
'10^5', '10^6', '10^7'))
plot(p)
library(ggplot2)
toPlot <- data.frame(sampleSize = log10(ss), pvalue = -log10(pvalues))
p <- ggplot(data = toPlot, mapping = aes(x = sampleSize, y = pvalue)) +
geom_point() +
xlab('log10 sample size') +
ylab('-log10 pvalue') +
theme_bw() +
scale_x_continuous(breaks = 1:7,
labels = c('10', '10^2',
'10^3', '10^4',
'10^5', '10^6', '10^7'))
plot(p)
ss <- c(5, 10, 50, 100, 500, 1000,
5000, 10000, 50000, 100000,
500000, 1000000)
nSs <- length(ss)
aveDiff <- 0.05
pvalues <- c()
for(i in 1:nSs){
sample1 <-rnorm(ss[i])
sample2 <-rnorm(ss[i]) + aveDiff
pvalues[i] <- t.test(sample1, sample2)$p.value
}
pvalues
library(ggplot2)
toPlot <- data.frame(sampleSize = log10(ss), pvalue = -log10(pvalues))
p <- ggplot(data = toPlot, mapping = aes(x = sampleSize, y = pvalue)) +
geom_point() +
xlab('log10 sample size') +
ylab('-log10 pvalue') +
theme_bw() +
scale_x_continuous(breaks = 1:7,
labels = c('10', '10^2',
'10^3', '10^4',
'10^5', '10^6', '10^7'))
plot(p)
ss <- c(5, 10, 50, 100, 500, 1000,
5000, 10000, 50000, 100000,
500000, 1000000)
nSs <- length(ss)
aveDiff <- 0.01
pvalues <- c()
for(i in 1:nSs){
sample1 <-rnorm(ss[i])
sample2 <-rnorm(ss[i]) + aveDiff
pvalues[i] <- t.test(sample1, sample2)$p.value
}
pvalues
library(ggplot2)
toPlot <- data.frame(sampleSize = log10(ss), pvalue = -log10(pvalues))
p <- ggplot(data = toPlot, mapping = aes(x = sampleSize, y = pvalue)) +
geom_point() +
xlab('log10 sample size') +
ylab('-log10 pvalue') +
theme_bw() +
scale_x_continuous(breaks = 1:6,
labels = c('10', '10^2',
'10^3', '10^4',
'10^5', '10^6'))
plot(p)
png(filename = 'pvalues.png', width = 1500, height = 1200, res = 300)
plot(p)
dev.off()
# Number of Genes
numGenes <- 5000
# Number of Permutations
numPerm <- 1001
# NULL statistics generation
statisticsNULL <- matrix(data = rnorm(n = numGenes * numPerm, mean = 10, sd = 2),
nrow = numGenes, ncol = numPerm)
require(parallel)
FDR_calculation <- function(statistics){
# statistics: matrix
# columns: statistics, first column initial statistics,
#          other columns statistics created during permutations
# rows: genes
statistics <- abs(statistics)
num_perm <- ncol(statistics) - 1
init_stats <- statistics[,1]
perm_stats <- statistics[,2: (num_perm + 1)]
q <- median(perm_stats)
pi0 <- (2*sum(init_stats <= q))/ length(init_stats)
fdr <- function(threshold){
V <- sum(perm_stats > threshold)/num_perm
R <- sum(init_stats > threshold)
FDR <- pi0*V/R
return(FDR)
}
FDR <- sapply(X = init_stats, FUN = fdr)
return(FDR)
}
FDR_calculation.parallel <- function(statistics, ncores){
# statistics: matrix
# columns: statistics, first column initial statistics,
#          other columns statistics created during permutations
# rows: genes
statistics <- abs(statistics)
num_perm <- ncol(statistics) - 1
init_stats <- statistics[,1]
perm_stats <- statistics[,2: (num_perm + 1)]
q <- median(perm_stats)
pi0 <- (2*sum(init_stats <= q))/ length(init_stats)
fdr <- function(threshold, init_stats, perm_stats, num_perm){
V <- sum(perm_stats > threshold)/num_perm
R <- sum(init_stats > threshold)
FDR <- pi0*V/R
return(FDR)
}
FDR <- mclapply(X = init_stats, FUN = fdr, init_stats = init_stats,
perm_stats = perm_stats, num_perm = num_perm,
mc.cores = ncores)
return(unlist(FDR))
}
numGenes <- 5000
numPerm <- 1001
statisticsNULL <- matrix(data = rnorm(n = numGenes * numPerm, mean = 10, sd = 2),
nrow = numGenes, ncol = numPerm)
system.time(test <- FDR_calculation(statistics = statisticsNULL))
summary(test.parallel)
system.time(test.parallel <- FDR_calculation.parallel(statistics = statisticsNULL))
summary(test)
library(bnlearn)
e
e <- empty.graph()
e <- empty.graph(1)
e <- empty.graph('1')
e
dag
dag <- matrix(rnorm(25) >1, 5, 5)
amat(e) <- dag
e <- empty.graph(letters[1:5])
amat(e) <- dag
dag <- matrix(rnorm(25) >1, 5, 5)
amat(e) <- dag
e
b <- rbn(e)
?rbn
2^12
getwd()
(98*27)/(1036*51)
log2(-1)
e^(-1)
2^(-1)
testedSamples <- 78
positiveSamples <- 49
sampleBinary <- rep(0, testedSamples)
sampleBinary[sample(1:testedSamples, positiveSamples)] <- 1
r(list = ls())
set.seed(12345)
testedSamples <- 78
positiveSamples <- 49
sampleBinary <- rep(0, testedSamples)
rm(list = ls())
set.seed(12345)
testedSamples <- 78
positiveSamples <- 49
sampleBinary <- rep(0, testedSamples)
sampleBinary[sample(1:testedSamples, positiveSamples)] <- 1
sampleBinary
sum(sampleBinary)
percs
perc
perc <- sum(sampleBinary) / length(sampleBinary)
perc
rm(list = ls())
set.seed(12345)
testedSamples <- 78
positiveSamples <- 49
nboots <- 10000
sampleBinary <- rep(0, testedSamples)
sampleBinary[sample(1:testedSamples, positiveSamples)] <- 1
perc <- sum(sampleBinary) / length(sampleBinary)
percs <- c()
for(i in 1:nboots){
newSampleBinary <- sampleBinary[sample(1:testedSamples, testedSamples, replace = TRUE)]
percs[i] <- sum(newSampleBinary) / length(newSampleBinary)
}
quantile(percs, c(0.025, 0.975))
install.packages('mbmdt')
install.packages('mbmdr')
install.packages('mbmdr')
library(mbmdr)
mbmdr
library(mbmdr)
devtools::install_github("mensxmachina/BioDataome")
library(d3heatmap)
devtools::install_github("mensxmachina/BioDataome")
library(BioDataome)
GSE10026<-curateGSE("GSE10026","GPL570",getwd())
setwd('D:\\Dropbox (Personal)\\inprogress\\TwoPagesBionformatics\\STATegRa\\R')
setwd('../tests/tmp')
source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/tests/tmp/testOmicsNPC_update.R')
#### Script for testing the omicsNPC function ####
#### Set up ####
#memory, library and sourcing
rm(list = ls())
source('../../R/STATegRa_omicsNPC_internal.R')
source('../../R/STATegRa_omicsNPC.R')
source('../../R/STATegRa_omicsNPC_ancillaryFunctions.R')
source('../../R/STATegRa_omicsPC.R')
source('../../R/STATegRa_omicsPC_internal.R')
library(foreach)
library(data.table)
#control panel
set.seed(12345)
combMethods <- c('Fisher', 'Liptak', 'Tippett');
numPerms <- 10;
numCores <- 3;
#### Binary outcome, two datasets ####
#creating the data matrices
dataset1 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset1) <- paste('g', 1:100, sep = '_')
colnames(dataset1) <- paste('sample', 1:20, sep = '_')
dataset2 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset2) <- paste('p', 1:100, sep = '_')
colnames(dataset2) <- paste('sample', 11:30, sep = '_')
#creating the phenotype data
phenotypeData <- matrix(rnorm(30*3), 30, 3)
rownames(phenotypeData) <- paste('sample', 1:30, sep = '_')
colnames(phenotypeData) <- c('cov1', 'cov2', 'outcome')
phenotypeData[, 'outcome'] <- c(rep(1, 15), rep(0, 15))
#one data matrix is actually differentially expressed
dataset1[ , 16:20] <- dataset1[ , 16:20] + 3 * matrix(runif(100 * 5), 100, 5)
#data mapping
dataMapping <- expand.grid(rownames(dataset1), rownames(dataset2))
dataMapping <- dataMapping[sample(1:nrow(dataMapping), 100), ]
colnames(dataMapping) <- c('dataset1', 'dataset2')
#omicsNPC
resultsNPC <- omicsNPC(dataInput = list(dataset1=dataset1, dataset2=dataset2), dataMapping = dataMapping,
phenotypeData = phenotypeData, numPerms = numPerms, numCores = numCores)
print(resultsNPC)
