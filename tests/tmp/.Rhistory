}
}
if(sum(dataWeights) != 1){
stop('dataWeights must be a numeric vector such that sum(dataWeights) == 1')
}
if(is.null(dataMapping)){
#creating the data mapping based on the rownames
#(we assume the all datasets have the same rownames encoding, e.g., probeset ids of the same platform)
mappings <- vector('list', length(dataInput));
for(i in 1:length(dataInput)){
mappings[[i]] <- data.frame(id = rownames(dataInput[[i]]),
reference = rownames(dataInput[[i]]));
}
dataMapping <- combiningMappings(mappings = mappings, reference = 'reference', retainAll = FALSE);
}
if(all(classNames == 'ExpressionSet')){
dataMatrices <- lapply(dataInput, FUN = exprs)
names(dataMatrices) <- names(dataInput);
}
if(all(classNames == 'data.frame')){
dataMatrices <- lapply(dataInput, FUN = as.matrix)
names(dataMatrices) <- names(dataInput);
}
if(all(classNames == 'matrix')){
dataMatrices <- dataInput;
}
if(all(classNames == 'ExpressionSet')){
designs <- lapply(X = dataInput, FUN = pData)
names(designs) <- names(dataInput);
}else{
if(is.null(phenotypeData)){
stop('phenotypeData is necessary if dataInput does not contain ExpressionSet objects')
}
#checks on phenotypeData if it is a vector
if(is.vector(phenotypeData)){
if(is.null(names(phenotypeData)) ||
length(intersect(names(phenotypeData), allSampleNames)) == 0){
stop('if phenotypeData is a vector, it must be named with the sample names')
}
#making phenotype data a data frame
phenoNames <- names(phenotypeData)
phenotypeData <- data.frame(phenotypeData, nrow = length(phenotypeData), ncol = 1)
rownames(phenotypeData) <- phenoNames
colnames(phenoNames) <- 'outcome'
}
#does phenotypeData contain the correct sample names?
if(length(intersect(rownames(phenotypeData), allSampleNames)) == 0){
stop('phenotypeData rows must be the named after the samples')
}
#extracting each single design
designs <- vector('list', length(dataInput));
names(designs) <- names(dataInput);
for(i in 1:length(dataInput)){
designs[[i]] <- phenotypeData[colnames(dataInput[[i]]), ]
}
}
if(class(dataTypes) == 'character'){
functionsAnalyzingData <- vector('list', length(dataTypes));
for(i in 1:length(dataTypes)){
if(dataTypes[i] == 'continuous'){
functionsAnalyzingData[[i]] <- computeAssocContinuousData;
}else{
functionsAnalyzingData[[i]] <- computeAssocCountData;
}
}
}else{
functionsAnalyzingData <- dataTypes;
}
if(is.null(functionGeneratingIndex)){
functionGeneratingIndex <- generate_iid_data_index
}
output <- omicsNPC_internal(dataMatrices = dataMatrices,
designs = designs,
dataMapping = dataMapping,
combMethods = combMethods,
functionsAnalyzingData = functionsAnalyzingData,
functionGeneratingIndex = functionGeneratingIndex,
outcomeName = outcomeName,
numPerms = numPerms,
numCores = numCores,
verbose = verbose,
allCombinations = allCombinations,
dataWeights = dataWeights,
returnPermPvalues = returnPermPvalues,
...)
output <- omicsNPC_internal(dataMatrices = dataMatrices,
designs = designs,
dataMapping = dataMapping,
combMethods = combMethods,
functionsAnalyzingData = functionsAnalyzingData,
functionGeneratingIndex = functionGeneratingIndex,
outcomeName = outcomeName,
numPerms = numPerms,
numCores = numCores,
verbose = verbose,
allCombinations = allCombinations,
dataWeights = dataWeights,
returnPermPvalues = returnPermPvalues)
if(verbose){
message("Compute initial statistics on data")
}
datasetsNames <- names(dataMatrices);
numDataMatrices <- length(dataMatrices)
numCombMethods <- length(combMethods);
parallelAvailable <- FALSE;
tmp <- computeAssociation(dataMatrices = dataMatrices, designs = designs, dataMapping = dataMapping, functionsAnalyzingData = functionsAnalyzingData, outcomeName = outcomeName, ...)
tmp <- computeAssociation(dataMatrices = dataMatrices, designs = designs, dataMapping = dataMapping, functionsAnalyzingData = functionsAnalyzingData, outcomeName = outcomeName)
results <- vector('list', length(dataMatrices));
for(j in 1:length(dataMatrices)){
results[[j]] <- functionsAnalyzingData[[j]](dataMatrices[[j]], designs[[j]], outcomeName, ...);
}
for(j in 1:length(dataMatrices)){
#results[[j]] <- functionsAnalyzingData[[j]](dataMatrices[[j]], designs[[j]], outcomeName, ...);
results[[j]] <- functionsAnalyzingData[[j]](dataMatrices[[j]], designs[[j]], outcomeName);
}
generate_iid_data_index <- function(design){
numSamples <- dim(design)[1];
index <- sample(x = 1:numSamples, size = numSamples, replace = FALSE)
return(index)
}
useVoom = FALSE
returnPValues = FALSE
require(limma);
require(survival);
require(edgeR)
if(!is.null(outcomeName)){
#check
if(!any(colnames(design) == outcomeName)){
stop(paste('Ensure', outcomeName, 'is present in all design matrices'));
}
#moving the outcome to last position
outcomeTemp <- design[[outcomeName]];
design[[outcomeName]] <- NULL;
design <- cbind(design, outcomeTemp);
names(design)[ncol(design)] <- outcomeName;
}
outcomeId <- ncol(design);
dataMatrix <- dataMatrices[[1]]
design <- designs[[1]]
useVoom = FALSE
returnPValues = FALSE
require(limma);
require(survival);
require(edgeR)
if(!is.null(outcomeName)){
#check
if(!any(colnames(design) == outcomeName)){
stop(paste('Ensure', outcomeName, 'is present in all design matrices'));
}
#moving the outcome to last position
outcomeTemp <- design[[outcomeName]];
design[[outcomeName]] <- NULL;
design <- cbind(design, outcomeTemp);
names(design)[ncol(design)] <- outcomeName;
}
outcomeId <- ncol(design);
multiGroups <- FALSE;
surv <- FALSE;
if((is.factor(design[[outcomeId]]) & length(levels(design[[outcomeId]])) >= 3) ||
(is.character(design[[outcomeId]]) & length(unique(design[[outcomeId]])) >= 3)){
multiGroups <- TRUE;
}
if(is.Surv(design[[outcomeId]])){
surv <- TRUE;
}
multiGroups
surv
numGroups <- length(unique(design[[outcomeId]]));
modelFormula <- as.formula(paste('~', paste(colnames(design), collapse = '+')))
design <- model.matrix(modelFormula, design)
design
class(phenotypeData)
#set up
rm(list = ls())
source('../../R/STATegRa_omicsNPC_internal.R')
source('../../R/STATegRa_omicsNPC.R')
source('../../R/STATegRa_omicsNPC_ancillaryFunctions.R')
set.seed(12345)
#control panel
combMethods <- c('Fisher', 'Liptak', 'Tippett');
numPerms <- 10000;
numCores <- 1;
#creating the data matrices
dataset1 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset1) <- paste('g', 1:100, sep = '_')
colnames(dataset1) <- paste('sample', 1:20, sep = '_')
dataset2 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset2) <- paste('p', 1:100, sep = '_')
colnames(dataset2) <- paste('sample', 11:30, sep = '_')
#creating the phenotype data
phenotypeData <- matrix(rnorm(30*3), 30, 3)
rownames(phenotypeData) <- paste('sample', 1:30, sep = '_')
colnames(phenotypeData) <- c('cov1', 'cov2', 'outcome')
#data mapping
dataMapping <- expand.grid(rownames(dataset1), rownames(dataset2))
dataMapping <- dataMapping[sample(1:nrow(dataMapping), 100), ]
#omicsNPC
results <- omicsNPC(dataInput = list(dataset1, dataset2), dataMapping = dataMapping,
phenotypeData = phenotypeData, numPerms = numPerms, numCores = 1)
library(foreach)
#set up
rm(list = ls())
source('../../R/STATegRa_omicsNPC_internal.R')
source('../../R/STATegRa_omicsNPC.R')
source('../../R/STATegRa_omicsNPC_ancillaryFunctions.R')
set.seed(12345)
library(foreach)
#control panel
combMethods <- c('Fisher', 'Liptak', 'Tippett');
numPerms <- 10000;
numCores <- 1;
#creating the data matrices
dataset1 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset1) <- paste('g', 1:100, sep = '_')
colnames(dataset1) <- paste('sample', 1:20, sep = '_')
dataset2 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset2) <- paste('p', 1:100, sep = '_')
colnames(dataset2) <- paste('sample', 11:30, sep = '_')
#creating the phenotype data
phenotypeData <- matrix(rnorm(30*3), 30, 3)
rownames(phenotypeData) <- paste('sample', 1:30, sep = '_')
colnames(phenotypeData) <- c('cov1', 'cov2', 'outcome')
#data mapping
dataMapping <- expand.grid(rownames(dataset1), rownames(dataset2))
dataMapping <- dataMapping[sample(1:nrow(dataMapping), 100), ]
#omicsNPC
results <- omicsNPC(dataInput = list(dataset1, dataset2), dataMapping = dataMapping,
phenotypeData = phenotypeData, numPerms = numPerms, numCores = 1)
#set up
rm(list = ls())
source('../../R/STATegRa_omicsNPC_internal.R')
source('../../R/STATegRa_omicsNPC.R')
source('../../R/STATegRa_omicsNPC_ancillaryFunctions.R')
set.seed(12345)
library(foreach)
library(data.table)
#control panel
combMethods <- c('Fisher', 'Liptak', 'Tippett');
numPerms <- 10000;
numCores <- 1;
#creating the data matrices
dataset1 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset1) <- paste('g', 1:100, sep = '_')
colnames(dataset1) <- paste('sample', 1:20, sep = '_')
dataset2 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset2) <- paste('p', 1:100, sep = '_')
colnames(dataset2) <- paste('sample', 11:30, sep = '_')
#creating the phenotype data
phenotypeData <- matrix(rnorm(30*3), 30, 3)
rownames(phenotypeData) <- paste('sample', 1:30, sep = '_')
colnames(phenotypeData) <- c('cov1', 'cov2', 'outcome')
#data mapping
dataMapping <- expand.grid(rownames(dataset1), rownames(dataset2))
dataMapping <- dataMapping[sample(1:nrow(dataMapping), 100), ]
#omicsNPC
results <- omicsNPC(dataInput = list(dataset1, dataset2), dataMapping = dataMapping,
phenotypeData = phenotypeData, numPerms = numPerms, numCores = 1)
#set up
rm(list = ls())
source('../../R/STATegRa_omicsNPC_internal.R')
source('../../R/STATegRa_omicsNPC.R')
source('../../R/STATegRa_omicsNPC_ancillaryFunctions.R')
set.seed(12345)
library(foreach)
library(data.table)
#control panel
combMethods <- c('Fisher', 'Liptak', 'Tippett');
numPerms <- 10000;
numCores <- 1;
#creating the data matrices
dataset1 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset1) <- paste('g', 1:100, sep = '_')
colnames(dataset1) <- paste('sample', 1:20, sep = '_')
dataset2 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset2) <- paste('p', 1:100, sep = '_')
colnames(dataset2) <- paste('sample', 11:30, sep = '_')
#creating the phenotype data
phenotypeData <- matrix(rnorm(30*3), 30, 3)
rownames(phenotypeData) <- paste('sample', 1:30, sep = '_')
colnames(phenotypeData) <- c('cov1', 'cov2', 'outcome')
#data mapping
dataMapping <- expand.grid(rownames(dataset1), rownames(dataset2))
dataMapping <- dataMapping[sample(1:nrow(dataMapping), 100), ]
#omicsNPC
results <- omicsNPC(dataInput = list(dataset1, dataset2), dataMapping = dataMapping,
phenotypeData = phenotypeData, numPerms = numPerms, numCores = 1)
#set up
rm(list = ls())
source('../../R/STATegRa_omicsNPC_internal.R')
source('../../R/STATegRa_omicsNPC.R')
source('../../R/STATegRa_omicsNPC_ancillaryFunctions.R')
set.seed(12345)
library(foreach)
library(data.table)
#control panel
combMethods <- c('Fisher', 'Liptak', 'Tippett');
numPerms <- 10000;
numCores <- 1;
#creating the data matrices
dataset1 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset1) <- paste('g', 1:100, sep = '_')
colnames(dataset1) <- paste('sample', 1:20, sep = '_')
dataset2 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset2) <- paste('p', 1:100, sep = '_')
colnames(dataset2) <- paste('sample', 11:30, sep = '_')
#creating the phenotype data
phenotypeData <- matrix(rnorm(30*3), 30, 3)
rownames(phenotypeData) <- paste('sample', 1:30, sep = '_')
colnames(phenotypeData) <- c('cov1', 'cov2', 'outcome')
#data mapping
dataMapping <- expand.grid(rownames(dataset1), rownames(dataset2))
dataMapping <- dataMapping[sample(1:nrow(dataMapping), 100), ]
#omicsNPC
results <- omicsNPC(dataInput = list(dataset1, dataset2), dataMapping = dataMapping,
phenotypeData = phenotypeData, numPerms = numPerms, numCores = 1)
rm(list = ls())
#set up
rm(list = ls())
source('../../R/STATegRa_omicsNPC_internal.R')
source('../../R/STATegRa_omicsNPC.R')
source('../../R/STATegRa_omicsNPC_ancillaryFunctions.R')
set.seed(12345)
library(foreach)
library(data.table)
#control panel
combMethods <- c('Fisher', 'Liptak', 'Tippett');
numPerms <- 10000;
numCores <- 1;
#creating the data matrices
dataset1 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset1) <- paste('g', 1:100, sep = '_')
colnames(dataset1) <- paste('sample', 1:20, sep = '_')
dataset2 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset2) <- paste('p', 1:100, sep = '_')
colnames(dataset2) <- paste('sample', 11:30, sep = '_')
#creating the phenotype data
phenotypeData <- matrix(rnorm(30*3), 30, 3)
rownames(phenotypeData) <- paste('sample', 1:30, sep = '_')
colnames(phenotypeData) <- c('cov1', 'cov2', 'outcome')
#data mapping
dataMapping <- expand.grid(rownames(dataset1), rownames(dataset2))
dataMapping <- dataMapping[sample(1:nrow(dataMapping), 100), ]
#omicsNPC
results <- omicsNPC(dataInput = list(dataset1, dataset2), dataMapping = dataMapping,
phenotypeData = phenotypeData, numPerms = numPerms, numCores = 1)
results$dataset_1
results$dataset_2
results$pvaluesNPC
#set up
rm(list = ls())
source('../../R/STATegRa_omicsNPC_internal.R')
source('../../R/STATegRa_omicsNPC.R')
source('../../R/STATegRa_omicsNPC_ancillaryFunctions.R')
set.seed(12345)
library(foreach)
library(data.table)
#control panel
combMethods <- c('Fisher', 'Liptak', 'Tippett');
numPerms <- 10000;
numCores <- 1;
#creating the data matrices
dataset1 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset1) <- paste('g', 1:100, sep = '_')
colnames(dataset1) <- paste('sample', 1:20, sep = '_')
dataset2 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset2) <- paste('p', 1:100, sep = '_')
colnames(dataset2) <- paste('sample', 11:30, sep = '_')
#creating the phenotype data
phenotypeData <- matrix(rnorm(30*3), 30, 3)
rownames(phenotypeData) <- paste('sample', 1:30, sep = '_')
colnames(phenotypeData) <- c('cov1', 'cov2', 'outcome')
#data mapping
dataMapping <- expand.grid(rownames(dataset1), rownames(dataset2))
dataMapping <- dataMapping[sample(1:nrow(dataMapping), 100), ]
#omicsNPC
results <- omicsNPC(dataInput = list(dataset1, dataset2), dataMapping = dataMapping,
phenotypeData = phenotypeData, numPerms = numPerms, numCores = 1)
#set up
rm(list = ls())
source('../../R/STATegRa_omicsNPC_internal.R')
source('../../R/STATegRa_omicsNPC.R')
source('../../R/STATegRa_omicsNPC_ancillaryFunctions.R')
set.seed(12345)
library(foreach)
library(data.table)
#control panel
combMethods <- c('Fisher', 'Liptak', 'Tippett');
numPerms <- 10;
numCores <- 1;
#creating the data matrices
dataset1 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset1) <- paste('g', 1:100, sep = '_')
colnames(dataset1) <- paste('sample', 1:20, sep = '_')
dataset2 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset2) <- paste('p', 1:100, sep = '_')
colnames(dataset2) <- paste('sample', 11:30, sep = '_')
#creating the phenotype data
phenotypeData <- matrix(rnorm(30*3), 30, 3)
rownames(phenotypeData) <- paste('sample', 1:30, sep = '_')
colnames(phenotypeData) <- c('cov1', 'cov2', 'outcome')
#data mapping
dataMapping <- expand.grid(rownames(dataset1), rownames(dataset2))
dataMapping <- dataMapping[sample(1:nrow(dataMapping), 100), ]
#omicsNPC
results <- omicsNPC(dataInput = list(dataset1, dataset2), dataMapping = dataMapping,
phenotypeData = phenotypeData, numPerms = numPerms, numCores = 1)
#set up
rm(list = ls())
source('../../R/STATegRa_omicsNPC_internal.R')
source('../../R/STATegRa_omicsNPC.R')
source('../../R/STATegRa_omicsNPC_ancillaryFunctions.R')
set.seed(12345)
library(foreach)
library(data.table)
#control panel
combMethods <- c('Fisher', 'Liptak', 'Tippett');
numPerms <- 10;
numCores <- 1;
#creating the data matrices
dataset1 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset1) <- paste('g', 1:100, sep = '_')
colnames(dataset1) <- paste('sample', 1:20, sep = '_')
dataset2 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset2) <- paste('p', 1:100, sep = '_')
colnames(dataset2) <- paste('sample', 11:30, sep = '_')
#creating the phenotype data
phenotypeData <- matrix(rnorm(30*3), 30, 3)
rownames(phenotypeData) <- paste('sample', 1:30, sep = '_')
colnames(phenotypeData) <- c('cov1', 'cov2', 'outcome')
#data mapping
dataMapping <- expand.grid(rownames(dataset1), rownames(dataset2))
dataMapping <- dataMapping[sample(1:nrow(dataMapping), 100), ]
#omicsNPC
results <- omicsNPC(dataInput = list(dataset1, dataset2), dataMapping = dataMapping,
phenotypeData = phenotypeData, numPerms = numPerms, numCores = 1)
rm(list = ls()
load('tmp.RData')
load('tmp.RData')
ls()
rm(list = ls())
load('tmp.RData')
ls()
results0$dataset_1
#set up
rm(list = ls())
source('../../R/STATegRa_omicsNPC_internal.R')
source('../../R/STATegRa_omicsNPC.R')
source('../../R/STATegRa_omicsNPC_ancillaryFunctions.R')
set.seed(12345)
library(foreach)
library(data.table)
#control panel
combMethods <- c('Fisher', 'Liptak', 'Tippett');
numPerms <- 10;
numCores <- 1;
#creating the data matrices
dataset1 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset1) <- paste('g', 1:100, sep = '_')
colnames(dataset1) <- paste('sample', 1:20, sep = '_')
dataset2 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset2) <- paste('p', 1:100, sep = '_')
colnames(dataset2) <- paste('sample', 11:30, sep = '_')
#creating the phenotype data
phenotypeData <- matrix(rnorm(30*3), 30, 3)
rownames(phenotypeData) <- paste('sample', 1:30, sep = '_')
colnames(phenotypeData) <- c('cov1', 'cov2', 'outcome')
#data mapping
dataMapping <- expand.grid(rownames(dataset1), rownames(dataset2))
dataMapping <- dataMapping[sample(1:nrow(dataMapping), 100), ]
#omicsNPC
results <- omicsNPC(dataInput = list(dataset1, dataset2), dataMapping = dataMapping,
phenotypeData = phenotypeData, numPerms = numPerms, numCores = 1)
results
#set up
rm(list = ls())
source('../../R/STATegRa_omicsNPC_internal.R')
source('../../R/STATegRa_omicsNPC.R')
source('../../R/STATegRa_omicsNPC_ancillaryFunctions.R')
set.seed(12345)
library(foreach)
library(data.table)
#control panel
combMethods <- c('Fisher', 'Liptak', 'Tippett');
numPerms <- 10;
numCores <- 1;
#creating the data matrices
dataset1 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset1) <- paste('g', 1:100, sep = '_')
colnames(dataset1) <- paste('sample', 1:20, sep = '_')
dataset2 <- matrix(rnorm(100*20), 100, 20)
rownames(dataset2) <- paste('p', 1:100, sep = '_')
colnames(dataset2) <- paste('sample', 11:30, sep = '_')
#creating the phenotype data
phenotypeData <- matrix(rnorm(30*3), 30, 3)
rownames(phenotypeData) <- paste('sample', 1:30, sep = '_')
colnames(phenotypeData) <- c('cov1', 'cov2', 'outcome')
#data mapping
dataMapping <- expand.grid(rownames(dataset1), rownames(dataset2))
dataMapping <- dataMapping[sample(1:nrow(dataMapping), 100), ]
#omicsNPC
results <- omicsNPC(dataInput = list(dataset1, dataset2), dataMapping = dataMapping,
phenotypeData = phenotypeData, numPerms = numPerms, numCores = 1)
print(results)
source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/tests/tmp/testOmicsNPC_update.R')
source('D:/Dropbox (Personal)/inprogress/TwoPagesBionformatics/STATegRa/tests/tmp/testOmicsNPC_update.R')
rm(list = ls())
library(xcms)
library(plotly)
metaboliteids <- c("173T188", "638T504", "M806T625")
nGroupids <- length(metaboliteids)
rawDataLocation <- '../../HUNT_C18 negESI_96samples_nov16/'
load('resultXCMS.RData')
